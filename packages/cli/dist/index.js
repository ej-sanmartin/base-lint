#!/usr/bin/env node
import{Command as er}from"commander";import S from"path";import{globby as kt}from"globby";import{minimatch as Pt}from"minimatch";import Ct from"ignore";import{promises as Qe}from"fs";import de from"path";import{parse as De}from"@typescript-eslint/typescript-estree";var Be=De;function D(e,t){try{return Be(e,{loc:!0,range:!0,jsx:t.endsWith("x"),comment:!1,errorOnUnknownASTType:!1,useJSXTextNode:!0,warnOnUnsupportedTypeScriptVersion:!1,loggerFn:()=>{}})}catch{return null}}function k(e,t,r=null){t(e,r);for(let n of Object.keys(e)){let o=e[n];if(o)if(Array.isArray(o))for(let i of o)i&&typeof i=="object"&&"type"in i&&k(i,t,e);else typeof o=="object"&&"type"in o&&k(o,t,e)}}import He from"postcss";function B(e,t){try{return He.parse(e,{from:t})}catch{return null}}function oe(e,t){e.walk(r=>{(r.type==="rule"||r.type==="atrule")&&t(r)})}import{parse as Ue,HTMLElement as qe}from"node-html-parser";function ae(e){let t=Ue(e,{script:!0,style:!0,comment:!1}),r=[],n=t.querySelectorAll("script, style");for(let o of n)if(o instanceof qe){if(o.tagName==="SCRIPT"){if(o.getAttribute("src"))continue;let s=o.innerHTML;r.push({type:"script",content:s,line:ie(e,se(o))})}else if(o.tagName==="STYLE"){let i=o.innerHTML;r.push({type:"style",content:i,line:ie(e,se(o))})}}return r}function ie(e,t){return t<=0?1:e.slice(0,t).split(/\r?\n/).length}function se(e){if(Array.isArray(e.range)&&e.range.length>0)return e.range[0];let t=e.toString(),r=e.root;return r?r.toString().indexOf(t):0}function U(e,t){let r=[];return k(e,(n,o)=>{if(n.type==="MemberExpression"){let i=Me(n,t);i&&r.push(i)}else if(n.type==="NewExpression"){let i=Je(n);i&&r.push(i)}else if(n.type==="Identifier"){let i=Ge(n,o);i&&r.push(i)}}),r}function q(e){let t=[];return oe(e,r=>{if(r.type==="rule"){let n=r.selector??"";n.includes(":has(")&&t.push(H("has",":has() selector",r)),n.includes(":where(")&&t.push(H("where",":where() selector",r))}r.type==="atrule"&&r.name==="container"&&t.push(H("container-queries","@container queries",r))}),t}function Me(e,t){if(!t.strict&&e.computed)return null;let r=v(e.object),n=e.property&&e.property.type==="Identifier"?e.property.name:null;return!r||!n?null:{"navigator.share":{featureId:"share",featureName:"Web Share API",line:e.property.loc?.start.line??e.loc?.start.line??null,column:(e.property.loc?.start.column??e.loc?.start.column??0)+1},"navigator.usb":{featureId:"webusb",featureName:"WebUSB API",line:e.property.loc?.start.line??e.loc?.start.line??null,column:(e.property.loc?.start.column??e.loc?.start.column??0)+1},"Notification.requestPermission":{featureId:"notifications",featureName:"Notifications API",line:e.property.loc?.start.line??e.loc?.start.line??null,column:(e.property.loc?.start.column??e.loc?.start.column??0)+1}}[`${r}.${n}`]??null}function Je(e){if(e.callee.type==="Identifier"){let t=e.callee.name;if(t==="Notification")return{featureId:"notifications",featureName:"Notifications API",line:e.callee.loc?.start.line??e.loc?.start.line??null,column:(e.callee.loc?.start.column??e.loc?.start.column??0)+1};if(t==="BroadcastChannel")return{featureId:"broadcast-channel",featureName:"BroadcastChannel API",line:e.callee.loc?.start.line??e.loc?.start.line??null,column:(e.callee.loc?.start.column??e.loc?.start.column??0)+1};if(t==="IdleDetector")return{featureId:"idle-detection",featureName:"Idle Detection API",line:e.callee.loc?.start.line??e.loc?.start.line??null,column:(e.callee.loc?.start.column??e.loc?.start.column??0)+1}}return null}function Ge(e,t){return e.name==="IdleDetector"?t&&t.type==="NewExpression"&&t.callee===e?null:{featureId:"idle-detection",featureName:"Idle Detection API",line:e.loc?.start.line??null,column:(e.loc?.start.column??0)+1}:null}function H(e,t,r){let n=r.source?.start;return{featureId:e,featureName:t,line:n?.line??null,column:n?n.column+1:null}}function v(e){if(e.type==="Identifier")return e.name;if(e.type==="TSAsExpression"||e.type==="TSTypeAssertion"||e.type==="TSNonNullExpression"||e.type==="ChainExpression")return v(e.expression);if(e.type==="MemberExpression"&&e.property.type==="Identifier"&&!e.computed){let t=v(e.object);if(t)return`${t}.${e.property.name}`}return null}import{readFileSync as Ve}from"fs";import{createRequire as We}from"module";import M from"path";import{pathToFileURL as ce}from"url";var ze=typeof import.meta<"u"&&import.meta.url?import.meta.url:typeof __filename<"u"?ce(__filename).href:ce(M.join(process.cwd(),"index.js")).href,le=We(ze),Ke=le("web-features/data.json"),J="unknown";try{let e=le.resolve("web-features"),t=M.join(M.dirname(e),"package.json"),r=Ve(t,"utf-8"),n=JSON.parse(r);typeof n.version=="string"&&(J=n.version)}catch{J="unknown"}var ue=new Map,Ye=Ke.features??{};for(let[e,t]of Object.entries(Ye))ue.set(e,{id:e,name:t.name??e,status:{baseline:t.status?.baseline??null},compat_features:t.compat_features??[]});function me(){return J}function pe(e){let t=ue.get(e);return t?{level:Xe(t.status?.baseline),featureName:t.name??e,compatKeys:t.compat_features??[]}:{level:"widely",featureName:e,compatKeys:[]}}function fe(e){switch(e){case"limited":return"Baseline Limited means the feature is not yet broadly supported\u2014provide fallback UI or feature detection for unsupported browsers.";case"newly":return"Baseline Newly means the feature only recently entered Baseline\u2014OK for modern targets, but keep a fallback in place for older browsers.";default:return"Baseline Widely means the feature is broadly supported\u2014no action required."}}function Xe(e){return e===!1?"limited":e==="low"?"newly":"widely"}import G from"picocolors";function V(e,t){let n=`${e==="info"?G.blue("[base-lint]"):e==="warn"?G.yellow("[base-lint]"):G.red("[base-lint]")} ${t}`;e==="error"?console.error(n):e==="warn"?console.warn(n):console.log(n)}var a={info:e=>V("info",e),warn:e=>V("warn",e),error:e=>V("error",e)};async function we(e){let{cwd:t,files:r,strict:n,suppress:o,treatNewlyAs:i,cliVersion:s}=e,l=me(),c=[];for(let p of r){let f=de.resolve(t,p),g;try{g=await Qe.readFile(f,"utf8")}catch(d){a.warn(`Unable to read ${p}: ${d.message}`);continue}let y=de.extname(p).toLowerCase();if([".js",".jsx",".ts",".tsx",".mjs",".cjs"].includes(y)){let d=Ze(g,p,{strict:n});ye(c,d,o);continue}if(y===".css"||y===".scss"){let d=et(g,p);ye(c,d,o);continue}if(y===".html"||y===".htm"){let d=await tt(g,p,n,o);c.push(...d);continue}}return c.sort((p,f)=>p.file.localeCompare(f.file)||(p.line??0)-(f.line??0)),{summary:rt(c),findings:c,meta:{cliVersion:s,datasetVersion:l,strict:n,treatNewlyAs:i,generatedAt:new Date().toISOString()}}}function Ze(e,t,r){let n=D(e,t);return n?U(n,{strict:r.strict}).map(i=>P(t,i)):(a.warn(`Unable to parse JavaScript in ${t}`),[])}function et(e,t){let r=B(e,t);return r?q(r).map(o=>P(t,o)):(a.warn(`Unable to parse CSS in ${t}`),[])}async function tt(e,t,r,n){let o=ae(e),i=[];for(let s of o)if(s.type==="script"){let l=D(s.content,`${t}#inline-script`);if(!l){a.warn(`Unable to parse inline script in ${t}`);continue}let c=U(l,{strict:r});for(let u of c){let m=ge(u,s.line),p=P(t,m);n.includes(p.featureId)||i.push(p)}}else if(s.type==="style"){let l=B(s.content,`${t}#inline-style`);if(!l){a.warn(`Unable to parse inline style in ${t}`);continue}let c=q(l);for(let u of c){let m=ge(u,s.line),p=P(t,m);n.includes(p.featureId)||i.push(p)}}return i}function ge(e,t){return{...e,line:e.line!=null?e.line+t-1:t}}function ye(e,t,r){for(let n of t)r.includes(n.featureId)||e.push(n)}function P(e,t){let r=pe(t.featureId),n=fe(r.level);return{file:e,line:t.line??null,column:t.column??null,featureId:t.featureId,featureName:r.featureName||t.featureName,baseline:r.level,guidance:n,ruleId:`baseline/${r.level}`}}function rt(e){let t={total:e.length,limited:0,newly:0,widely:0};for(let r of e)r.baseline==="limited"?t.limited+=1:r.baseline==="newly"?t.newly+=1:t.widely+=1;return t}function W(e){return JSON.stringify(e,null,2)}function z(e){let t=[];t.push("<!-- base-lint-sticky -->"),t.push("## Base Lint Report"),t.push("");let r=`**Status:** ${nt(e.summary)}`;if(t.push(r),t.push(""),t.push("| File | Line | Feature | Baseline | Guidance |"),t.push("|------|------|---------|----------|----------|"),e.findings.length===0)t.push("| (none) | - | - | - | Baseline clear |");else for(let n of e.findings){let o=n.line!=null?String(n.line):"-",i=he(n.featureName),s=he(n.guidance);t.push(`| ${n.file} | ${o} | ${i} | ${it(n.baseline)} | ${s} |`)}return t.push(""),t.push(`Policy: Limited = error (max 0), Newly = ${ot(e.meta.treatNewlyAs)}`),t.push(`Dataset: web-features ${e.meta.datasetVersion}`),t.join(`
`)}function nt(e){return[`\u274C Limited: ${e.limited}`,`\u26A0\uFE0F Newly: ${e.newly}`,`\u2705 Widely: ${e.widely}`].join(" \xB7 ")}function ot(e){switch(e){case"error":return"error";case"ignore":return"ignored";default:return"warn (non-blocking)"}}function he(e){return e.replace(/\|/g,"\\|")}function it(e){return e.charAt(0).toUpperCase()+e.slice(1)}var st="2.1.0",at="https://json.schemastore.org/sarif-2.1.0.json",be={limited:"error",newly:"warning",widely:"note"};function K(e){let t=ct(e),r=e.findings.map(o=>ut(o)),n={$schema:at,version:st,runs:[{tool:{driver:{name:"base-lint",semanticVersion:e.meta.cliVersion,informationUri:"https://github.com/GoogleChromeLabs/base-lint",rules:t}},results:r}]};return JSON.stringify(n,null,2)}function ct(e){let t=new Map;for(let r of e.findings){let n=Y(r);t.has(n)||t.set(n,lt(r,e))}return Array.from(t.values())}function lt(e,t){let r=be[e.baseline];return{id:Y(e),name:e.featureName,shortDescription:{text:e.featureName},fullDescription:{text:e.guidance},defaultConfiguration:{level:r},properties:{category:Se(e.baseline),baseline:e.baseline,featureId:e.featureId,datasetVersion:t.meta.datasetVersion,ruleId:e.ruleId}}}function ut(e){let t=be[e.baseline],r=[mt(e)];return{ruleId:Y(e),level:t,message:{text:ft(e)},locations:r,properties:{baseline:e.baseline,featureId:e.featureId}}}function mt(e){let t=pt(e),r={artifactLocation:{uri:dt(e.file)}};return t&&(r.region=t),{physicalLocation:r}}function pt(e){let t={};return e.line!=null&&(t.startLine=e.line,t.endLine=e.line),e.column!=null&&(t.startColumn=e.column,t.endColumn=e.column),Object.keys(t).length>0?t:void 0}function ft(e){return`${e.featureName} is ${Se(e.baseline)}: ${e.guidance}`}function dt(e){return e.replace(/\\/g,"/")}function Y(e){return`web-feature:${e.featureId}`}function Se(e){return e.charAt(0).toUpperCase()+e.slice(1)}var gt={md:z,json:W,sarif:K};function C(e,t){let r=gt[t.format];if(!r)throw new Error(`Unsupported report format: ${t.format}`);return r(e)}import{promises as T}from"fs";import yt from"path";async function $(e){await T.mkdir(e,{recursive:!0})}async function E(e,t){await $(yt.dirname(e)),await T.writeFile(e,t,"utf8")}async function xe(e,t,r={}){let n=await wt(e);return n&&!r.force?"skipped":(await E(e,t),n?"overwritten":"created")}async function Ne(e,t){await E(e,JSON.stringify(t,null,2))}async function A(e){let t=await T.readFile(e,"utf8");return JSON.parse(t)}async function O(e){try{return await T.readFile(e,"utf8")}catch(t){if(t.code==="ENOENT")return null;throw t}}async function wt(e){try{return await T.access(e),!0}catch(t){if(t.code==="ENOENT")return!1;throw t}}import X from"path";import{promises as ht}from"fs";var bt={mode:"diff",treatNewlyAs:"warn",maxLimited:0,strict:!1,targets:"all",suppress:[],include:[],ignore:[]},Q=["node_modules/","dist/","build/","coverage/","*.min.js"];async function Ee(e,t){let r=t.config?X.resolve(e,t.config):X.join(e,"base-lint.config.json"),n=await St(r);if(t.config&&!n)throw new Error(`Config file not found at ${r}`);let o={...bt,...n??{}};if(t.mode){if(!["diff","repo"].includes(t.mode))throw new Error(`Unsupported mode: ${t.mode}`);o.mode=t.mode}if(typeof t.strict=="boolean"&&(o.strict=t.strict),t.treatNewly){if(!["warn","error","ignore"].includes(t.treatNewly))throw new Error(`Unsupported treat-newly option: ${t.treatNewly}`);o.treatNewlyAs=t.treatNewly}o.maxLimited=Number(n?.maxLimited??o.maxLimited),Number.isNaN(o.maxLimited)&&(o.maxLimited=0);let i=Array.isArray(o.suppress)?o.suppress:[],s=Array.isArray(n?.ignore)?n.ignore??[]:[],l=Array.isArray(n?.include)?n.include??[]:[],c=await xt(e),u=[...Q,...s,...c],m=Array.from(new Set(u.filter(Boolean))),p=l;return{config:{...o,suppress:i,ignore:m,include:p},ignorePatterns:m,includePatterns:p,configPath:n?r:void 0}}async function St(e){try{let t=await ht.readFile(e,"utf8");return JSON.parse(t)}catch(t){if(t.code==="ENOENT")return null;throw t}}async function xt(e){let t=await O(X.join(e,".base-lintignore"));return t?t.split(/\r?\n/).map(r=>r.trim()).filter(r=>r.length>0&&!r.startsWith("#")):[]}import{promisify as Nt}from"util";import{exec as Et}from"child_process";import Rt from"path";var vt=Nt(Et);async function Re(e){let t=(await R(["rev-parse","HEAD"],e)).trim(),r=process.env.GITHUB_BASE_REF,n=process.env.GITHUB_SHA,o=await At(),i=null;if(o&&n)i=`${o}...${n}`;else if(r)i=`origin/${r}...${t}`;else{let c=await Tt(e).catch(()=>null);c&&(i=`${c}...${t}`)}let s;i?s=["diff","--name-only","--diff-filter=ACMRTUB",i]:s=["diff","--name-only","--diff-filter=ACMRTUB","HEAD"];let l;try{l=await R(s,e)}catch{l=await R(["diff","--name-only","--diff-filter=ACMRTUB","HEAD"],e)}return l.split(/\r?\n/).map(c=>c.trim()).filter(Boolean)}async function R(e,t){let r=`git ${e.join(" ")}`,{stdout:n}=await vt(r,{cwd:t});return n}async function Tt(e){try{let n=(await R(["merge-base","HEAD","origin/HEAD"],e)).trim();if(n)return n}catch{}let t=["main","master"];for(let n of t)try{let o=(await R(["merge-base","HEAD",n],e)).trim();if(o)return o}catch{}return(await R(["rev-parse","HEAD^"],e)).trim()}async function At(){let e=process.env.GITHUB_EVENT_PATH;if(!e)return null;try{let t=await O(Rt.resolve(e));if(!t)return null;let r=JSON.parse(t),n=r?.pull_request?.base?.sha??r?.merge_group?.base_sha;return typeof n=="string"?n:null}catch{return null}}function ve(e,t=5){let n=e.split(`
`).filter((i,s)=>!(s===0&&i.startsWith("<!--"))),o=[];for(let i=0;i<n.length;i+=1){let s=n[i];if(s.startsWith("|------")){o.push(s);let l=[],c=i+1;for(;c<n.length;){let m=n[c];if(!m.startsWith("|"))break;l.push(m),c+=1}let u=l.slice(0,t);if(o.push(...u),l.length>t){let m=l.length-t;o.push(`| \u2026 | \u2026 | \u2026 | \u2026 | \u2026 (${m} more) |`)}i=c-1;continue}s.startsWith("<!--")||o.push(s)}return o.join(`
`).trimEnd()}var Te={name:"base-lint",version:"1.1.2",description:"Lint your repo against Web Baseline policies",license:"MIT",bugs:{url:"https://github.com/ej-sanmartin/base-lint/issues"},homepage:"https://github.com/web-baseline/base-lint#readme",repository:{type:"git",url:"https://github.com/ej-sanmartin/base-lint",directory:"packages/cli"},funding:{type:"individual",url:"https://Ko-fi.com/esanmartin"},type:"module",bin:{"base-lint":"dist/index.js"},files:["dist"],imports:{vitest:"../../tests/mocks/vitest.js"},scripts:{build:"tsup --config tsup.config.ts",dev:"tsx src/index.ts --help",prepublishOnly:"npm run build"},dependencies:{"@typescript-eslint/typescript-estree":"^6.21.0",commander:"^11.1.0",globby:"^13.2.2",ignore:"^5.3.1",minimatch:"^9.0.3","node-html-parser":"^6.1.11",picocolors:"^1.0.0",postcss:"^8.4.35","web-features":"^2.0.0"},devDependencies:{"@types/node":"^20.11.30",tsup:"^8.0.1",tsx:"^4.7.1",typescript:"^5.4.2"},keywords:["lint","baseline","eslint","stylelint","typescript","javascript","css","cli","ci","bot","static-analysis","code-quality","code-style","automation","best-practices"]};import It from"path";var h=".base-lint-report",F=It.join(h,"report.json");function _(e,t){let r=Number.isFinite(t.maxLimited??0)?t.maxLimited??0:0;return e.limited>r?{code:1,message:`Limited findings (${e.limited}) exceed the allowed maximum (${r}).`}:(t.treatNewlyAs??"warn")==="error"&&e.newly>0?{code:2,message:`Newly findings (${e.newly}) are treated as errors by policy.`}:{code:0}}var $t=[".js",".jsx",".ts",".tsx",".mjs",".cjs",".css",".scss",".html",".htm"];async function Ae(e){let t=process.cwd(),r=S.resolve(t,e.out??h),n=await Ee(t,e),o=n.config,i=await Ot(t,o.mode,n.includePatterns,n.ignorePatterns);i.length===0?a.warn("No files matched the scan configuration."):a.info(`Scanning ${i.length} file(s) in ${o.mode} mode.`);let s=await we({cwd:t,files:i,strict:o.strict,suppress:o.suppress??[],treatNewlyAs:o.treatNewlyAs,cliVersion:Te.version??"0.0.0"});await $(r);let l=C(s,{format:"md"}),c=C(s,{format:"json"});await E(S.join(r,"report.json"),c),await E(S.join(r,"report.md"),l),await Ne(S.join(r,"meta.json"),{cliVersion:s.meta.cliVersion,datasetVersion:s.meta.datasetVersion,generatedAt:s.meta.generatedAt,config:{path:n.configPath??null,mode:o.mode,strict:o.strict,treatNewlyAs:o.treatNewlyAs,maxLimited:o.maxLimited,suppress:o.suppress,include:o.include,ignore:o.ignore},filesAnalyzed:i});let u=(e.outFormat??"md").toLowerCase(),m=["md","json","sarif"];if(!m.includes(u))throw new Error(`Invalid value for --out-format: ${e.outFormat}. Supported formats are ${m.join(", ")}.`);let p=u,f=C(s,{format:p}),g=e.outFile?S.resolve(t,e.outFile):void 0;if(p==="md"&&(e.outFormatSource===void 0||e.outFormatSource==="default")){let I=e.printFullReport?l:ve(l);I.trim().length>0&&console.log(I)}g?(await $(S.dirname(g)),await E(g,f)):(process.stdout.write(f),f.endsWith(`
`)||process.stdout.write(`
`)),a.info(`Report written to ${r}`);let d=_(s.summary,{maxLimited:o.maxLimited,treatNewlyAs:o.treatNewlyAs});d.code!==0&&(process.exitCode=d.code,d.message&&a.error(d.message))}async function Ot(e,t,r,n){let o=_t(n),i=Ct();i.add(o);let s=r.map(u=>Pt.filter(u,{dot:!0,matchBase:!0})),l=u=>!(!$t.includes(S.extname(u).toLowerCase())||i.ignores(u)||s.length>0&&!s.some(m=>m(u)));if(t==="repo"){let u=r.length>0?r:["**/*"],m=await kt(u,{cwd:e,gitignore:!0,dot:!0,ignore:o,onlyFiles:!0});return Array.from(new Set(m.filter(p=>l(p))))}let c=await Re(e);return Array.from(new Set(c.filter(u=>l(u))))}function _t(e){let t=[];for(let r of e)t.push(r),r.endsWith("/")&&t.push(`${r}**`);return t}import Lt from"path";async function Fe(e){let t=process.cwd(),r=e.input??F,n=Lt.resolve(t,r),o;try{o=await A(n)}catch(m){if(e.inputSource==="default"&&m?.code==="ENOENT"){a.error(`No report found at ${F} \u2014 run \`base-lint scan\` first or pass --input`),process.exitCode=3;return}throw m}let i=Number(e.maxLimited??0),s=o.summary.limited,l=o.summary.newly;if(a.info(`Report summary \u2013 Limited: ${s}, Newly: ${l}, Widely: ${o.summary.widely}`),Number.isNaN(i))throw new Error("Invalid max-limited value.");let c=o.meta.treatNewlyAs;e.failOnWarn===!0?c="error":e.failOnWarn===!1&&(c=o.meta.treatNewlyAs==="ignore"?"ignore":"warn");let u=_(o.summary,{maxLimited:i,treatNewlyAs:c});if(u.code!==0){process.exitCode=u.code,u.message&&a.error(u.message);return}a.info("Baseline policy satisfied.")}import{promises as Ie}from"fs";import jt from"path";async function ke(e){let t=process.cwd(),r=e.stickyMarker??"<!-- base-lint-sticky -->",n=jt.resolve(t,e.input),o=await Ie.readFile(n,"utf8"),i=process.env.GITHUB_TOKEN||process.env.GH_TOKEN,s=process.env.GITHUB_REPOSITORY,l=process.env.GITHUB_EVENT_NAME;if(!i||!s||!l){a.info("GitHub context not detected. Skipping sticky comment.");return}if(!l.startsWith("pull_request")){a.info(`Event ${l} is not a pull request. Skipping comment.`);return}let c=await Dt();if(!c){a.info("No pull request number found in event payload. Skipping comment.");return}if(c.isFork){a.info("Pull request originates from a fork. Skipping sticky comment to avoid permission issues.");return}let[u,m]=s.split("/"),f=(await Bt(u,m,c.number,i)).find(y=>y.body?.includes(r));if(f){await Ut(u,m,f.id,o,i)&&a.info(`Updated existing sticky comment #${f.id}.`);return}await Ht(u,m,c.number,o,i)&&a.info(`Created sticky comment on PR #${c.number}.`)}async function Dt(){let e=process.env.GITHUB_EVENT_PATH;if(!e)return null;try{let t=await Ie.readFile(e,"utf8"),r=JSON.parse(t),n=r?.pull_request?.number??r?.number;if(typeof n!="number")return null;let o=r?.pull_request?.base?.repo?.full_name,i=r?.pull_request?.head?.repo?.full_name;return{number:n,isFork:!!(i&&o&&i!==o)}}catch(t){return a.warn(`Failed to parse GitHub event payload: ${t.message}`),null}}async function Bt(e,t,r,n){let o=`https://api.github.com/repos/${e}/${t}/issues/${r}/comments?per_page=100`,i=await Z(o,n);if(!i.ok){if(i.status===403||i.status===404)return a.warn(`Insufficient permissions to list comments (status ${i.status}).`),[];throw new Error(`Failed to list comments: ${i.status}`)}return await i.json()}async function Ht(e,t,r,n,o){let i=`https://api.github.com/repos/${e}/${t}/issues/${r}/comments`,s=await Z(i,o,{method:"POST",body:JSON.stringify({body:n})});if(!s.ok){if(s.status===403||s.status===404)return a.warn(`Insufficient permissions to create comment (status ${s.status}).`),!1;throw new Error(`Failed to create comment: ${s.status}`)}return!0}async function Ut(e,t,r,n,o){let i=`https://api.github.com/repos/${e}/${t}/issues/comments/${r}`,s=await Z(i,o,{method:"PATCH",body:JSON.stringify({body:n})});if(!s.ok){if(s.status===403||s.status===404)return a.warn(`Insufficient permissions to update comment (status ${s.status}).`),!1;throw new Error(`Failed to update comment: ${s.status}`)}return!0}async function Z(e,t,r={}){let n=new Headers(r.headers??{});return n.set("Authorization",`Bearer ${t}`),n.set("Accept","application/vnd.github+json"),n.set("User-Agent","base-lint-cli"),fetch(e,{...r,headers:n})}import qt from"path";async function Ce(e){let t=process.cwd(),r=qt.resolve(t,e.input),n=await A(r),o=process.env.GITHUB_TOKEN||process.env.GH_TOKEN,i=process.env.GITHUB_REPOSITORY,s=process.env.GITHUB_EVENT_NAME??"",l=process.env.GITHUB_SHA;if(!o||!i){a.info("GitHub context not detected. Skipping annotations.");return}let c=l;if(s.startsWith("pull_request")){let w=await Vt();if(w?.isFork){a.info("Pull request originates from a fork. Skipping annotations.");return}w?.headSha&&(c=w.headSha)}if(!c){a.info("GitHub context not detected. Skipping annotations.");return}let u=Mt(n.findings,n.meta.treatNewlyAs),m=Math.max(1,Number(e.batchSize??"50")),p=`Limited: ${n.summary.limited} \xB7 Newly: ${n.summary.newly} \xB7 Widely: ${n.summary.widely}`,f=Gt(n),[g,y]=i.split("/"),d="Base Lint",I=new Date().toISOString(),ee={title:d,summary:p,text:"Generated by base-lint."},je=u.slice(0,m),N=await Pe(`https://api.github.com/repos/${g}/${y}/check-runs`,o,{method:"POST",body:JSON.stringify({name:d,head_sha:c,status:"completed",conclusion:f,completed_at:I,output:{...ee,annotations:je}})});if(!N.ok){if(N.status===403||N.status===404){a.warn(`Insufficient permissions to create check run (status ${N.status}).`);return}throw new Error(`Failed to create check run: ${N.status}`)}let te=(await N.json()).id;if(!te){a.warn("Check run created without id. Skipping additional annotations.");return}let j=u.slice(m);if(j.length===0)return;let re=[];for(let w=0;w<j.length;w+=m)re.push(j.slice(w,w+m));for(let w of re){let ne=await Pe(`https://api.github.com/repos/${g}/${y}/check-runs/${te}`,o,{method:"PATCH",body:JSON.stringify({status:"completed",conclusion:f,completed_at:new Date().toISOString(),output:{...ee,annotations:w}})});if(!ne.ok){a.warn(`Failed to append annotations (status ${ne.status}).`);break}}}function Mt(e,t){let r=[];for(let n of e){if(n.baseline==="widely")continue;let o=Jt(n.baseline,t),i=n.line??1,s=n.column??void 0;r.push({path:n.file,start_line:i,end_line:i,start_column:s,end_column:s,annotation_level:o,title:n.featureName,message:`${n.featureName} is ${n.baseline}. ${n.guidance}`})}return r}function Jt(e,t){return e==="limited"||t==="error"?"failure":t==="ignore"?"notice":"warning"}function Gt(e){return e.summary.limited>0||e.meta.treatNewlyAs==="error"&&e.summary.newly>0?"failure":e.summary.newly>0?"neutral":"success"}async function Vt(){let e=process.env.GITHUB_EVENT_PATH;if(!e)return null;try{let t=await A(e),r=t?.pull_request?.base?.repo?.full_name,n=t?.pull_request?.head?.repo?.full_name,o=!!(n&&r&&n!==r),i=typeof t?.pull_request?.head?.sha=="string"?t.pull_request.head.sha:void 0;return{isFork:o,headSha:i}}catch(t){return a.warn(`Failed to read event payload: ${t.message}`),null}}async function Pe(e,t,r={}){let n=new Headers(r.headers??{});return n.set("Authorization",`Bearer ${t}`),n.set("Accept","application/vnd.github+json"),n.set("User-Agent","base-lint-cli"),fetch(e,{...r,headers:n})}import Wt from"path";import{promises as zt}from"fs";async function $e(e={}){let t=process.cwd(),r=Wt.resolve(t,e.out??h);try{await zt.rm(r,{recursive:!0,force:!0}),a.info(`Removed report directory at ${r}`)}catch(n){let o=n instanceof Error?n.message:String(n);throw a.error(`Failed to remove report directory at ${r}: ${o}`),n}}import L from"path";var Oe={name:"base-lint-action",version:"1.1.0",description:"GitHub Action wrapper for the base-lint CLI, which lints your repo against Web Baseline policies.",license:"MIT",main:"dist/index.js",files:["dist","action.yml","README.md"],imports:{vitest:"../../tests/mocks/vitest.js"},scripts:{build:"node ../../scripts/build-action.mjs",prepare:"npm run build"},dependencies:{"@actions/core":"^1.10.1","@actions/github":"^6.0.1","@actions/cache":"^3.2.4"},devDependencies:{typescript:"^5.4.2"}};var Yt=`${JSON.stringify({mode:"diff",treatNewlyAs:"warn",maxLimited:0,strict:!1,targets:"all",suppress:[],include:[],ignore:[]},null,2)}
`,Xt=`${Q.join(`
`)}
`;function Qt(e){return`name: Base Lint

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  baseline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ej-sanmartin/base-lint@base-lint-action-v${e}
        with:
          github-token: \${{ github.token }}
          mode: diff
          max-limited: 0
          treat-newly-as: warn
          comment: true
          checks: true
          cache: true
`}async function _e(e={}){let t=process.cwd(),r=!!e.force,n=Oe.version??"1.1.0",o=[{path:L.join(t,"base-lint.config.json"),contents:Yt},{path:L.join(t,".base-lintignore"),contents:Xt},{path:L.join(t,".github","workflows","base-lint.yml"),contents:Qt(n)}],i=[];for(let l of o){let c=await xe(l.path,l.contents,{force:r});i.push({filePath:l.path,status:c});let u=L.relative(t,l.path);c==="created"?a.info(`Created ${u}`):c==="overwritten"?a.info(`Overwrote ${u}`):a.warn(`Skipped ${u} (already exists). Use --force to overwrite.`)}i.filter(l=>l.status!=="skipped").length>0?(a.info("Base Lint initialization complete!"),a.info("Next steps:"),a.info("  1. Review base-lint.config.json to customize thresholds."),a.info("  2. Commit the generated files to version control."),a.info("  3. Push to GitHub to enable the Base Lint workflow.")):a.warn("No files were created. Re-run with --force to overwrite existing files.")}var Le={name:"base-lint",version:"1.1.2",description:"Lint your repo against Web Baseline policies",license:"MIT",bugs:{url:"https://github.com/ej-sanmartin/base-lint/issues"},homepage:"https://github.com/web-baseline/base-lint#readme",repository:{type:"git",url:"https://github.com/ej-sanmartin/base-lint",directory:"packages/cli"},funding:{type:"individual",url:"https://Ko-fi.com/esanmartin"},type:"module",bin:{"base-lint":"dist/index.js"},files:["dist"],imports:{vitest:"../../tests/mocks/vitest.js"},scripts:{build:"tsup --config tsup.config.ts",dev:"tsx src/index.ts --help",prepublishOnly:"npm run build"},dependencies:{"@typescript-eslint/typescript-estree":"^6.21.0",commander:"^11.1.0",globby:"^13.2.2",ignore:"^5.3.1",minimatch:"^9.0.3","node-html-parser":"^6.1.11",picocolors:"^1.0.0",postcss:"^8.4.35","web-features":"^2.0.0"},devDependencies:{"@types/node":"^20.11.30",tsup:"^8.0.1",tsx:"^4.7.1",typescript:"^5.4.2"},keywords:["lint","baseline","eslint","stylelint","typescript","javascript","css","cli","ci","bot","static-analysis","code-quality","code-style","automation","best-practices"]};var b=new er;b.name("base-lint").description("Baseline-aware linting for modern web platform features").version(Le.version??"0.0.0");b.command("init").description("Generate base-lint config, ignore file, and GitHub workflow scaffolding").option("--force","overwrite existing files").action(async e=>{try{await _e(e)}catch(t){x(t)}});b.command("scan").description("Scan files for Baseline coverage issues").option("--mode <mode>","analysis mode: diff or repo","diff").option("--out <dir>","output directory for reports",h).option("--out-format <format>","format of stdout/file output: md|json|sarif","md").option("--out-file <file>","path to write the formatted report output").option("--strict","enable strict feature detection").option("--treat-newly <behavior>","treat Newly features as warn|error|ignore","warn").option("--config <path>","path to config file override").option("--print-full-report","print the full Markdown report to stdout").action(async(e,t)=>{try{await Ae({...e,outFormatSource:t.getOptionValueSource("out-format")})}catch(r){x(r)}});b.command("enforce").description("Enforce policy against a previously generated JSON report").option("--input <file>","path to JSON report",F).option("--max-limited <count>","maximum number of limited findings","0").option("--fail-on-warn","treat Newly findings as failures").action(async(e,t)=>{try{await Fe({...e,inputSource:t.getOptionValueSource("input")})}catch(r){x(r)}});b.command("comment").description("Create or update a sticky pull request summary comment on GitHub").requiredOption("--input <file>","Markdown report to post").option("--sticky-marker <marker>","HTML comment marker for sticky comment","<!-- base-lint-sticky -->").action(async e=>{try{await ke(e)}catch(t){x(t)}});b.command("annotate").description("Publish GitHub Checks annotations for findings").requiredOption("--input <file>","JSON report to annotate from").option("--batch-size <n>","number of annotations per API request","50").action(async e=>{try{await Ce(e)}catch(t){x(t)}});b.command("clean").description("Remove generated Baseline report artifacts").option("--out <dir>","report directory to delete",h).action(async e=>{try{await $e(e)}catch(t){x(t)}});b.parseAsync().catch(e=>{x(e)});function x(e){e instanceof Error?a.error(e.stack??e.message):a.error(String(e)),process.exitCode=3}
